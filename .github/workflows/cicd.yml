name: CICD Pipeline

on:
  push:
    branches: [main]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: react-quiz-env
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build & tag image
        run: |
          docker build \
            -t visheshtomarr/react-quiz-app:latest \
            -t visheshtomarr/react-quiz-app:${{ github.sha }} \
            .

      - name: Push images
        run: |
          docker push visheshtomarr/react-quiz-app:latest
          docker push visheshtomarr/react-quiz-app:${{ github.sha }}

  rollout:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: react-quiz-env
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: (Optional) Raise ASG max size for safer rolling
        run: |
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name "${{ secrets.ASG_NAME }}" \
            --max-size 8

      - name: Start rolling Instance Refresh
        run: |
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name "${{ secrets.ASG_NAME }}" \
            --preferences MinHealthyPercentage=90,InstanceWarmup=120

      - name: Wait for Instance Refresh to complete
        run: |
          ASG="${{ secrets.ASG_NAME }}"
          for i in {1..120}; do
            STATUS=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name "$ASG" --query 'InstanceRefreshes[0].Status' --output text)
            echo "Refresh status: $STATUS"
            if [ "$STATUS" = "Successful" ]; then exit 0; fi
            if [ "$STATUS" = "Cancelled" ] || [ "$STATUS" = "Failed" ]; then exit 1; fi
            sleep 15
          done
          echo "Timed out waiting for instance refresh"; exit 1

      - name: Restore ASG max size
        if: always()
        run: |
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name "${{ secrets.ASG_NAME }}" \
            --max-size 6
